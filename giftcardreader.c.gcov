        -:    0:Source:giftcardreader.c
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Gift Card Reading Application
        -:    3: * Original Author: Shoddycorp's Cut-Rate Contracting
        -:    4: * Comments added by: Justin Cappos (JAC) and Brendan Dolan-Gavitt (BDG)
        -:    5: * Maintainer:
        -:    6: * Date: 8 July 2020
        -:    7: */
        -:    8:
        -:    9:
        -:   10:#include "giftcard.h"
        -:   11:
        -:   12:#include <stdio.h>
        -:   13:#include <string.h>
        -:   14:
        -:   15:// interpreter for THX-1138 assembly
function animate called 1 returned 100% blocks executed 59%
        1:   16:void animate(char *msg, unsigned char *program) {
        -:   17:    unsigned char regs[16];
        1:   18:    char *mptr = msg;
        1:   19:    unsigned char *pc = program;
        1:   20:    int i = 0;
        1:   21:    int zf = 0;
       82:   22:    while (1) {
        -:   23:        unsigned char op, arg1, arg2;
       83:   24:        op = *pc;
       83:   25:        arg1 = *(pc+1);
       83:   26:        arg2 = *(pc+2);
       83:   27:        switch (*pc) {
branch  0 taken 34
branch  1 taken 5
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 1
branch 10 taken 2
branch 11 taken 41
        -:   28:            case 0x00:
       34:   29:                break;
        -:   30:            case 0x01:
        5:   31:                regs[arg1] = *mptr;
        5:   32:                break;
        -:   33:            case 0x02:
    #####:   34:                *mptr = regs[arg1];
    #####:   35:                break;
        -:   36:            case 0x03:
    #####:   37:                mptr += (char)arg1;
    #####:   38:                break;
        -:   39:            case 0x04:
    #####:   40:                regs[arg2] = arg1;
    #####:   41:                break;
        -:   42:            case 0x05:
    #####:   43:                regs[arg1] ^= regs[arg2];
    #####:   44:                zf = !regs[arg1];
    #####:   45:                break;
        -:   46:            case 0x06:
    #####:   47:                regs[arg1] += regs[arg2];
    #####:   48:                zf = !regs[arg1];
    #####:   49:                break;
        -:   50:            case 0x07:
    #####:   51:                puts(msg);
call    0 never executed
    #####:   52:                break;
        -:   53:            case 0x08:
    #####:   54:                goto done;
        -:   55:            //hang.gft
        -:   56:            case 0x09:
        1:   57:                pc += (unsigned char)arg1;
        1:   58:                break;
        -:   59:            case 0x10:
        2:   60:                if (zf) pc += (char)arg1;
branch  0 taken 0 (fallthrough)
branch  1 taken 2
        2:   61:                break;
        -:   62:        }
       83:   63:        pc+=3;
       83:   64:        if (pc > program+256) break;
branch  0 taken 1 (fallthrough)
branch  1 taken 82
        -:   65:    }
        -:   66:done:
        1:   67:    return;
        -:   68:}
        -:   69:
function get_gift_card_value called 1 returned 100% blocks executed 100%
        1:   70:int get_gift_card_value(struct this_gift_card *thisone) {
        -:   71:	struct gift_card_data *gcd_ptr;
        -:   72:	struct gift_card_record_data *gcrd_ptr;
        -:   73:	struct gift_card_amount_change *gcac_ptr;
        1:   74:	int ret_count = 0;
        -:   75:
        1:   76:	gcd_ptr = thisone->gift_card_data;
        3:   77:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   78:  		gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
        2:   79:		if (gcrd_ptr->type_of_record == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   80:			gcac_ptr = gcrd_ptr->actual_record;
        1:   81:			ret_count += gcac_ptr->amount_added;
        -:   82:		}	
        -:   83:	}
        1:   84:	return ret_count;
        -:   85:}
        -:   86:
function print_gift_card_info called 1 returned 100% blocks executed 91%
        1:   87:void print_gift_card_info(struct this_gift_card *thisone) {
        -:   88:	struct gift_card_data *gcd_ptr;
        -:   89:	struct gift_card_record_data *gcrd_ptr;
        -:   90:	struct gift_card_amount_change *gcac_ptr;
        -:   91:    struct gift_card_program *gcp_ptr;
        -:   92:
        1:   93:	gcd_ptr = thisone->gift_card_data;
        1:   94:	printf("   Merchant ID: %32.32s\n",gcd_ptr->merchant_id);
call    0 returned 1
        1:   95:	printf("   Customer ID: %32.32s\n",gcd_ptr->customer_id);
call    0 returned 1
        1:   96:	printf("   Num records: %d\n",gcd_ptr->number_of_gift_card_records);
call    0 returned 1
        3:   97:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   98:  		gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
        2:   99:		if (gcrd_ptr->type_of_record == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  100:			printf("      record_type: amount_change\n");
call    0 returned 1
        1:  101:			gcac_ptr = gcrd_ptr->actual_record;
        1:  102:			printf("      amount_added: %d\n",gcac_ptr->amount_added);
call    0 returned 1
        1:  103:			if (gcac_ptr->amount_added>0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  104:				printf("      signature: %32.32s\n",gcac_ptr->actual_signature);
call    0 returned 1
        -:  105:			}
        -:  106:		}	
        1:  107:		else if (gcrd_ptr->type_of_record == 2) {
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  108:			printf("      record_type: message\n");
call    0 never executed
    #####:  109:			printf("      message: %s\n",(char *)gcrd_ptr->actual_record);
call    0 never executed
        -:  110:		}
        1:  111:		else if (gcrd_ptr->type_of_record == 3) {
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  112:            gcp_ptr = gcrd_ptr->actual_record;
        1:  113:			printf("      record_type: animated message\n");
call    0 returned 1
        1:  114:            printf("      message: %s\n", gcp_ptr->message);
call    0 returned 1
        1:  115:            printf("  [running embedded program]  \n");
call    0 returned 1
        1:  116:            animate(gcp_ptr->message, gcp_ptr->program);
call    0 returned 1
        -:  117:		}
        -:  118:	}
        1:  119:	printf("  Total value: %d\n\n",get_gift_card_value(thisone));
call    0 returned 1
call    1 returned 1
        1:  120:}
        -:  121:
        -:  122:// Added to support web functionalities
function gift_card_json called 0 returned 0% blocks executed 0%
    #####:  123:void gift_card_json(struct this_gift_card *thisone) {
        -:  124:    struct gift_card_data *gcd_ptr;
        -:  125:    struct gift_card_record_data *gcrd_ptr;
        -:  126:    struct gift_card_amount_change *gcac_ptr;
    #####:  127:    gcd_ptr = thisone->gift_card_data;
    #####:  128:    printf("{\n");
call    0 never executed
    #####:  129:    printf("  \"merchant_id\": \"%32.32s\",\n", gcd_ptr->merchant_id);
call    0 never executed
    #####:  130:    printf("  \"customer_id\": \"%32.32s\",\n", gcd_ptr->customer_id);
call    0 never executed
    #####:  131:    printf("  \"total_value\": %d,\n", get_gift_card_value(thisone));
call    0 never executed
call    1 never executed
    #####:  132:    printf("  \"records\": [\n");
call    0 never executed
    #####:  133:	for(int i=0;i<gcd_ptr->number_of_gift_card_records; i++) {
branch  0 never executed
branch  1 never executed
    #####:  134:        gcrd_ptr = (struct gift_card_record_data *) gcd_ptr->gift_card_record_data[i];
    #####:  135:        printf("    {\n");
call    0 never executed
    #####:  136:        if (gcrd_ptr->type_of_record == 1) {
branch  0 never executed
branch  1 never executed
    #####:  137:            printf("      \"record_type\": \"amount_change\",\n");
call    0 never executed
    #####:  138:            gcac_ptr = gcrd_ptr->actual_record;
    #####:  139:            printf("      \"amount_added\": %d,\n",gcac_ptr->amount_added);
call    0 never executed
    #####:  140:            if (gcac_ptr->amount_added>0) {
branch  0 never executed
branch  1 never executed
    #####:  141:                printf("      \"signature\": \"%32.32s\"\n",gcac_ptr->actual_signature);
call    0 never executed
        -:  142:            }
        -:  143:        }
    #####:  144:        else if (gcrd_ptr->type_of_record == 2) {
branch  0 never executed
branch  1 never executed
    #####:  145:			printf("      \"record_type\": \"message\",\n");
call    0 never executed
    #####:  146:			printf("      \"message\": \"%s\"\n",(char *)gcrd_ptr->actual_record);
call    0 never executed
        -:  147:        }
    #####:  148:        else if (gcrd_ptr->type_of_record == 3) {
branch  0 never executed
branch  1 never executed
    #####:  149:            struct gift_card_program *gcp = gcrd_ptr->actual_record;
    #####:  150:			printf("      \"record_type\": \"animated message\",\n");
call    0 never executed
    #####:  151:			printf("      \"message\": \"%s\",\n",gcp->message);
call    0 never executed
        -:  152:            // programs are binary so we will hex for the json
    #####:  153:            char *hexchars = "01234567890abcdef";
        -:  154:            char program_hex[512+1];
    #####:  155:            program_hex[512] = '\0';
        -:  156:            int i;
    #####:  157:            for(i = 0; i < 256; i++) {
branch  0 never executed
branch  1 never executed
    #####:  158:                program_hex[i*2] = hexchars[((gcp->program[i] & 0xf0) >> 4)];
    #####:  159:                program_hex[i*2+1] = hexchars[(gcp->program[i] & 0x0f)];
        -:  160:            }
    #####:  161:			printf("      \"program\": \"%s\"\n",program_hex);
call    0 never executed
        -:  162:        }
    #####:  163:        if (i < gcd_ptr->number_of_gift_card_records-1)
branch  0 never executed
branch  1 never executed
    #####:  164:            printf("    },\n");
call    0 never executed
        -:  165:        else
    #####:  166:            printf("    }\n");
call    0 never executed
        -:  167:    }
    #####:  168:    printf("  ]\n");
call    0 never executed
    #####:  169:    printf("}\n");
call    0 never executed
    #####:  170:}
        -:  171:
        -:  172:
        -:  173:
        -:  174:/* JAC: input_fd is misleading... It's a FILE type, not a fd */
function gift_card_reader called 2 returned 50% blocks executed 95%
        2:  175:struct this_gift_card *gift_card_reader(FILE *input_fd) {
        -:  176:
        2:  177:	struct this_gift_card *ret_val = malloc(sizeof(struct this_gift_card));
        -:  178:
        -:  179:    void *optr;
        -:  180:	void *ptr;
        -:  181:
        -:  182:	// Loop to do the whole file
        5:  183:	while (!feof(input_fd)) {
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        -:  184:
        -:  185:		struct gift_card_data *gcd_ptr;
        -:  186:		/* JAC: Why aren't return types checked? */
        2:  187:		fread(&ret_val->num_bytes, 4,1, input_fd);
call    0 returned 2
        -:  188:
        -:  189:        //crash1
        2:  190:        if (ret_val->num_bytes < 0) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  191:            printf("Error: it needs a positive value \n");
call    0 returned 1
        1:  192:            exit(0);
call    0 returned 0
        -:  193:        }
        -:  194:
        -:  195:		// Make something the size of the rest and read it in
        1:  196:		ptr = malloc(ret_val->num_bytes);
        1:  197:		fread(ptr, ret_val->num_bytes, 1, input_fd);
call    0 returned 1
        -:  198:
        1:  199:        optr = ptr-4;
        -:  200:
        1:  201:		gcd_ptr = ret_val->gift_card_data = malloc(sizeof(struct gift_card_data));
        1:  202:		gcd_ptr->merchant_id = ptr;
        1:  203:		ptr += 32;	
        -:  204://		printf("VD: %d\n",(int)ptr - (int) gcd_ptr->merchant_id);
        1:  205:		gcd_ptr->customer_id = ptr;
        1:  206:		ptr += 32;	
        -:  207:		/* JAC: Something seems off here... */
        1:  208:		gcd_ptr->number_of_gift_card_records = *((char *)ptr);
        1:  209:		ptr += 4;
        -:  210:
        1:  211:		gcd_ptr->gift_card_record_data = (void *)malloc(gcd_ptr->number_of_gift_card_records*sizeof(void*));
        -:  212:
        -:  213:		// Now ptr points at the gift card recrod data
        4:  214:		for (int i=0; i<=gcd_ptr->number_of_gift_card_records; i++){
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        -:  215:			//printf("i: %d\n",i);
        -:  216:			struct gift_card_record_data *gcrd_ptr;
        3:  217:			gcrd_ptr = gcd_ptr->gift_card_record_data[i] = malloc(sizeof(struct gift_card_record_data));
        -:  218:			struct gift_card_amount_change *gcac_ptr;
        3:  219:			gcac_ptr = gcrd_ptr->actual_record = malloc(sizeof(struct gift_card_record_data));
        -:  220:            struct gift_card_program *gcp_ptr;
        3:  221:			gcp_ptr = malloc(sizeof(struct gift_card_program));
        -:  222:
        3:  223:			gcrd_ptr->record_size_in_bytes = *((char *)ptr);
        -:  224:            //printf("rec at %x, %d bytes\n", ptr - optr, gcrd_ptr->record_size_in_bytes); 
        3:  225:			ptr += 4;	
        -:  226:			//printf("record_data: %d\n",gcrd_ptr->record_size_in_bytes);
        3:  227:			gcrd_ptr->type_of_record = *((char *)ptr);
        3:  228:			ptr += 4;	
        -:  229:            //printf("type of rec: %d\n", gcrd_ptr->type_of_record);
        -:  230:
        -:  231:			// amount change
        3:  232:			if (gcrd_ptr->type_of_record == 1) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  233:				gcac_ptr->amount_added = *((int*) ptr);
        1:  234:				ptr += 4;	
        -:  235:
        -:  236:				// don't need a sig if negative
        -:  237:				/* JAC: something seems off here */
        -:  238:				if (gcac_ptr < 0) break;
        -:  239:
        1:  240:				gcac_ptr->actual_signature = ptr;
        1:  241:				ptr+=32;
        -:  242:			}
        -:  243:			// message
        3:  244:			if (gcrd_ptr->type_of_record == 2) {
branch  0 taken 0 (fallthrough)
branch  1 taken 3
    #####:  245:				gcrd_ptr->actual_record = ptr;
        -:  246:				// advance by the string size + 1 for nul
        -:  247:                // BDG: does not seem right
    #####:  248:				ptr=ptr+strlen((char *)gcrd_ptr->actual_record)+1;
        -:  249:			}
        -:  250:            // BDG: never seen one of these in the wild
        -:  251:            // text animatino (BETA)
        3:  252:            if (gcrd_ptr->type_of_record == 3) {
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  253:                gcp_ptr->message = malloc(32);
        1:  254:                gcp_ptr->program = malloc(256);
        1:  255:                memcpy(gcp_ptr->message, ptr, 32);
        1:  256:                ptr+=32;
        1:  257:                memcpy(gcp_ptr->program, ptr, 256);
        1:  258:                ptr+=256;
        1:  259:                gcrd_ptr->actual_record = gcp_ptr;
        -:  260:            }
        -:  261:		}
        -:  262:	}
        1:  263:	return ret_val;
        -:  264:}
        -:  265:
        -:  266:// BDG: why not a local variable here?
        -:  267:struct this_gift_card *thisone;
        -:  268:
function main called 2 returned 50% blocks executed 64%
        2:  269:int main(int argc, char **argv) {
        -:  270:    // BDG: no argument checking?
        2:  271:	FILE *input_fd = fopen(argv[2],"r");
call    0 returned 2
        -:  272:    //crash2
        2:  273:    if (input_fd == NULL) {
branch  0 taken 0 (fallthrough)
branch  1 taken 2
    #####:  274:        printf("Invalid Entry! Please input a valid giftcard file.");
call    0 never executed
    #####:  275:        return 0;
        -:  276:    }
        2:  277:	thisone = gift_card_reader(input_fd);
call    0 returned 1
        1:  278:	if (argv[1][0] == '1') print_gift_card_info(thisone);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
call    2 returned 1
    #####:  279:    else if (argv[1][0] == '2') gift_card_json(thisone);
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  280:
        1:  281:	return 0;
        -:  282:}
